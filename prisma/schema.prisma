// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String  @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  email          String? @unique
  hashedPassword String?

  emailVerified  DateTime?
  image          String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  movies Movie[]
  shows  Show[]
  posts  Post[]

  discussionIds String[]     @db.ObjectId
  discussions   Discussion[] @relation(fields: [discussionIds], references: [id])

  accounts Account[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Movie {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  dbId        Int      
  title       String
  image       String?
  description String?
  voteAverage Float?
  date        String?
  rated       Int?
  createdAt   DateTime @default(now())
  seen        Boolean  @default(false)

  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])
}

model Show {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  dbId        Int      
  title       String
  image       String?
  description String?
  voteAverage Float?
  date        String?
  rated       Int?
  seasons     Int?
  createdAt   DateTime @default(now())
  seen        Boolean  @default(false)

  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])
}

model Discussion {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  createdAt DateTime @default(now())

  userIds String[] @db.ObjectId
  users   User[]   @relation(fields: [userIds], references: [id])

  posts Post[]
}

model Post {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  rating    Int?
  createdAt DateTime @default(now())
  content   String

  discussionId String     @db.ObjectId
  discussion   Discussion @relation(fields: [discussionId], references: [id])

  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])
}
